#!/bin/bash

set -e

source /opt/ros/$(dir /opt/ros)/setup.bash

sudo cp files/49-teensy.rules /etc/udev/rules.d/

ROSDISTRO="$(rosversion -d)"
BASE="2wd" # $1 
SENSOR="SICK" # $2
ARCH="$(uname -m)"
WORKSPACE="pluto_ws"
echo "Architecture is $ARCH"
echo "ROS is $ROSDISTRO"

if [ ! -d "$HOME/$WORKSPACE/src/" ]; then
	cd $HOME
	mkdir -p $WORKSPACE/src
	cd $HOME/$WORKSPACE/src
	catkin_init_workspace
	
	echo "NOT INSTALLING BOT, PROBABLY I'LL FAIL, install manually linorobot or plutobot and the proper branch"
fi

# echo "
# ______ _____________   _________ ________ _______ ________ _______ ________
# ___  / ____  _/___  | / /__  __ \___  __ \__  __ \___  __ )__  __ \___  __/
# __  /   __  /  __   |/ / _  / / /__  /_/ /_  / / /__  __  |_  / / /__  /   
# _  /_____/ /   _  /|  /  / /_/ / _  _, _/ / /_/ / _  /_/ / / /_/ / _  /    
# /_____//___/   /_/ |_/   \____/  /_/ |_|  \____/  /_____/  \____/  /_/     
                    
                            # http://linorobot.org                                                                          
# "
# if [ "$3" != "test" ]
    # then
        # if [ "$*" == "" ]
            # then
                # echo "No arguments provided"
                # echo
                # echo "Example: $ ./install.sh 2wd xv11"
                # echo
                # exit 1
                
        # elif [[ "$1" != "2wd" && "$1" != "4wd" && "$1" != "mecanum" && "$1" != "ackermann" ]]
            # then
                # echo "Invalid linorobot base: $1"
                # echo
                # echo "Valid Options:"
                # echo "2wd"
                # echo "4wd"
                # echo "ackermann"
                # echo "mecanum"
                # echo
                # exit 1

        # elif [[ "$2" != "xv11" && "$2" != "rplidar" && "$2" != "ydlidar" && "$2" != "hokuyo" && "$2" != "kinect" && "$2" != "realsense" ]]
            # then
                # echo "Invalid linorobot sensor: $2"
                # echo
                # echo "Valid Options:"
                # echo "xv11"
                # echo "rplidar"
                # echo "ydlidar"
                # echo "hokuyo"
                # echo "kinect"
                # echo "realsense"
                # echo
                # exit 1
        
        # elif [[ "$ARCH" != "x86_64" && "$2" == "realsense" ]]
            # then
                # echo "Intel Realsense R200 is not supported in $ARCH architecture."
                # exit 1

        # fi

        # echo
        # echo -n "You are installing ROS-$ROSDISTRO Linorobot for $BASE base with a $SENSOR sensor. Enter [y] to continue. " 
        # read reply
        # if [[ "$reply" != "y" && "$reply" != "Y" ]]
            # then
                # echo "Wrong input. Exiting now"
                # exit 1
        # fi
# fi

if [ "$1" == "update" ]
	then

		echo
		echo "UPDATE SYSTEM AND ROS NOW...."
		echo

		# update the system amd install some packages
		echo "UBUNTU...."
		sudo apt-get update
		sudo apt-get install -y \
		avahi-daemon \
		openssh-server \
		python-setuptools \
		python-dev \
		build-essential \
		python-gudev

		# Teensy FW tools
		echo "TEENSY...."
		sudo easy_install pip
		sudo python2.7 -m pip install -U platformio
		sudo rm -rf $HOME/.platformio/

		# update ROS
		echo "ROS...."
		source /opt/ros/$ROSDISTRO/setup.bash
		sudo apt-get install -y \
		ros-$ROSDISTRO-roslint \
		ros-$ROSDISTRO-rosserial \
		ros-$ROSDISTRO-rosserial-arduino \
		ros-$ROSDISTRO-imu-filter-madgwick \
		ros-$ROSDISTRO-gmapping \
		ros-$ROSDISTRO-map-server \
		ros-$ROSDISTRO-navigation \
		ros-$ROSDISTRO-robot-localization \
		ros-$ROSDISTRO-tf2 \
		ros-$ROSDISTRO-tf2-ros 
		echo "UPDATE FINISHED NOW...."
	else
		echo "UPDATE IGNORED...."
fi
# cd $HOME
# mkdir -p $WORKSPACE/src
# cd $HOME/$WORKSPACE/src
# catkin_init_workspace
# git clone https://github.com/linorobot/lino_msgs.git

# For now we assume the workspace is created
# cd $HOME/$WORKSPACE/
# catkin_make
# source devel/setup.bash

# A SICK radar is used, probably here we need to add the dependecy
# if [[ "$3" == "test" ]]
    # then
        # sudo apt-get install -y \
        # ros-$ROSDISTRO-xv-11-laser-driver \
        # ros-$ROSDISTRO-rplidar-ros \
        # ros-$ROSDISTRO-urg-node \
        # ros-$ROSDISTRO-freenect-launch \
        # ros-$ROSDISTRO-depthimage-to-laserscan \
        # ros-$ROSDISTRO-teb-local-planner 

        # cd $HOME/$WORKSPACE/src
        # git clone https://github.com/EAIBOT/ydlidar.git

# else
    # if [[ "$SENSOR" == "xv11" ]]
        # then
            # sudo apt-get install -y ros-$ROSDISTRO-xv-11-laser-driver

    # elif [[ "$SENSOR" == "rplidar" ]]
        # then
            # sudo apt-get install -y ros-$ROSDISTRO-rplidar-ros

    # elif [[ "$SENSOR" == "ydlidar" ]]
        # then
            # cd $HOME/$WORKSPACE/src
            # git clone https://github.com/EAIBOT/ydlidar.git

    # elif [[ "$SENSOR" == "hokuyo" ]]
        # then
            # sudo apt-get install -y ros-$ROSDISTRO-urg-node
            # hokuyoip=
            # echo ""
            # echo -n "Input your hokuyo IP (Default 192.168.0.10). Press Enter to skip (Serial Based LIDAR): "
            # read hokuyoip
            # echo "export LIDARIP=$hokuyoip" >> $HOME/.bashrc

    # elif [[ "$SENSOR" == "kinect" ]]
        # then
            # sudo apt-get install -y ros-$ROSDISTRO-freenect-launch
            # sudo apt-get install -y ros-$ROSDISTRO-depthimage-to-laserscan

    # elif [[ "$SENSOR" == "realsense" ]]
        # then
            # sudo apt-get install -y ros-$ROSDISTRO-realsense-camera
            # sudo apt-get install -y ros-$ROSDISTRO-depthimage-to-laserscan
    # fi

    # if [[ "$BASE" == "ackermann" ]]
        # then
            # sudo apt-get install -y ros-$ROSDISTRO-teb-local-planner
    # fi
# fi

# Clone the needed ROS packages for the system, if they exists assume they are ok. Delete manually if you want fresh install
cd $HOME/$WORKSPACE/src
declare -a arr=("lino_msgs" "imu_calib" "lino_pid" "lino_udev")
for i in "${arr[@]}" # naja, tricky but very compact
	do
		if [[ ! -d "$HOME/$WORKSPACE/src/$i/" ]]; then
			echo "Calling git Cloning $i"
			git clone "https://github.com/linorobot/$i.git"
		else
			echo "$HOME/$WORKSPACE/src/$i exists, delete folder $i for fresh install"
		fi
	done


# Something related to CI? Ignoring
# cd $HOME/$WORKSPACE/src/linorobot
# TRAVIS_BRANCH="echo $TRAVIS_BRANCH"
# if [ "$TRAVIS_BRANCH" = "devel" ]; then git checkout devel; fi

# Checking firmware for teensy compile
cd $HOME/$WORKSPACE/src/plutobot/teensy/firmware
export PLATFORMIO_CI_SRC=$PWD/src/firmware.ino
platformio ci --project-conf=./platformio.ini --lib="./lib/ros_lib" --lib="./lib/config"  --lib="./lib/motor"  --lib="./lib/kinematics"  --lib="./lib/pid"  --lib="./lib/imu" --lib="./lib/encoder"


echo "source $HOME/$WORKSPACE/devel/setup.bash" >> $HOME/.bashrc
echo "export LINOLIDAR=$SENSOR" >> $HOME/.bashrc
echo "export LINOBASE=$BASE" >> $HOME/.bashrc
source $HOME/.bashrc



echo "Calling catkin make workspace..."
cd $HOME/$WORKSPACE
catkin_make

echo
echo "INSTALLATION DONE!"
echo
